name: 'Executing_Terraform'
run-name: ${{ github.actor }} is testing terraform execution using GitHub Actions

on:
  push:
    branches:
    - aws
 # pull_request:
env:
  environment: production
 
jobs:
  terraform:
    runs-on: ubuntu-latest
    name: 'TerraformAuthenticationWithAzure'
    env:
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - name: shell command
        run: |
            if [[ ${{ env.environment }} == "production" ]]; then
              backendConf="prod.conf"
              pwd
              cat prod.conf
            else
              backendConf="dev.conf"
              cat dev.conf
              echo "There is no github tag reference, skipping"
            fi 
      - name: Run read-yaml action
        id: yaml-data
        uses: jbutcher5/read-yaml@main      # You may wish to replace main with a version tag such as '1.6' etc.
        with:
          file: 'sample.yaml'          # File to read from
          key-path: '["runs", "using"]' # Access the runs key then the using key and retuns the value.

      - name: Display read-yaml output
        run: echo "${{ steps.yaml-data.outputs.data }}"
#     - name: Copy configuration files
#       run: |
#           tfRoot=${{ env.tfRoot }}
#           rootDir=\$PWD
#           envDir=\$PWD/\$tfRoot
#           cp \$envDir/Optumfile.yml \$rootDir
#           cp \$rootDir/${backendConf} \$envDir/backend.conf
#           echo \$envDir
#           cd ./${tfRoot}
      
#     - name: Running terraform init
#       run: terraform init
      
#     - name: Terraform Validate
#       id: validate
#       run: terraform validate -no-color
      
#     - name: Terraform plan
#       #if: github.event_name == 'pull_request'
#       run: terraform plan -no-color -input=false
      
#     - name: Terraform Fmt
#       run: |
#           ls -ll
#           terraform fmt
#     - name: Terraform Apply
#       run: terraform apply --auto-approve -no-color

